/*  HC12 Send/Receive Example Program 1
    By Mark J. Hughes
    for AllAboutCircuits.com
   
    Connect HC12 "RXD" pin to Arduino Digital Pin 4
    Connect HC12 "TXD" pin to Arduino Digital Pin 5
    Connect HC12 "Set" pin to Arduino Digital Pin 6
   
    Do not power over USB.  Per datasheet,
    power HC12 with a supply of at least 100 mA with
    a 22 uF - 1000 uF reservoir capacitor.
    Upload code to two Arduinos connected to two computers.
   
    Transceivers must be at least several meters apart to work.
   
 */
#include "Arduino.h"
#include <avr/sleep.h>
#include <avr/wdt.h>
#include <SoftwareSerial.h>
#define Sensor_Out_Pin A5
#define vibration_detector A4
#define Read_battery_voltage A1
const byte HC12RxdPin = 4;  // Recieve Pin on HC12
const byte HC12TxdPin = 5;  // Transmit Pin on HC12
const byte locked = 9;      // The situation when locked.
const byte onoroff = 8;     // If the main circuit is on
const byte Alarmrelay = 7;
const byte batteryrelay = 1;//////////////////////////////////////////////////////////////////////////////////////
//Three states: 1.Locked & on => all circuits are active. 2. Locked & off => check the battery status once, recieves signals but no other circuits on. 3. unlocked & off => no power supply
int lock_voltage = 0;
int a;
bool checked = 0;
bool lock_status;
bool onoroff_status;
int num = 10;
int condition[10] = { 0 };  // Declare and initialize array of 10 integers
int i;
int count = 0;

bool sleep = 0;
int check_loop = 0;
int alarm_limit = 0;

SoftwareSerial HC12(HC12TxdPin, HC12RxdPin);  // Create Software Serial Port

void setup() {
  Serial.begin(9600);  // Open serial port to computer
  HC12.begin(9600);    // Open serial port to HC12
  pinMode(A0, INPUT);
  pinMode(Alarmrelay, OUTPUT);
  pinMode(Read_battery_voltage, INPUT);
  pinMode(batteryrelay, OUTPUT);
  pinMode(vibration_detector, INPUT);
  pinMode(locked, INPUT);
  pinMode(onoroff, INPUT);
}

void loop() {
  if (sleep){
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    sleep_enable();
    noInterrupts();
    attachInterrupt(digitalPinToInterrupt(A0),sleepISR,change);
    attachInterrupt(digitalPinToInterrupt(vibration_detector),sleepISR,change);
    interrupts();
    sleep_cpu();
    sleep = 0;
  }
  check_status();
  delay(1000);
}

void sleepISR() {
  // Prevent sleep mode, so we don't enter it again, except deliberately, by code
  sleep_disable();
  // Detach the interrupt that brought us out of sleep
  detachInterrupt(digitalPinToInterrupt(A0));
  detachInterrupt(digitalPinToInterrupt(vibration_detector));
  // Now we continue running the main Loop() just after we went to sleep
}


void check_status() {
  lock_status = digitalRead(locked);
  onoroff_status = digitalRead(onoroff);  
  if (lock_status == LOW) {
    delay(2000);
    a = 0;
    checked = 1;
  } else if (onoroff_status == LOW) {
    if (HC12.available()) {  //Read off the atenna
      a = HC12.read();
    }
    if (a == '%' || checked == 0) {  //if got command or first time checking
      check_for_battery();
    }
    a = 0;
    checked = 1;
  } else {  // locked and alarming on situation
    Alarming();
    checked = 0;
    if (HC12.available()) {  //Read off the atenna
      a = HC12.read();
    }
    if (a == '%') {  //if got command or first time checking
      check_for_battery();
    }
    a = 0;
    Vibration ();
  }
}

void Alarming() {
  lock_voltage = digitalRead(A0);
  if (lock_voltage == HIGH && alarm_limit <= 75) 
  { //75 is the threshhold of 5 mins
    digitalWrite(7, HIGH);  //where to put the buzzer.
    HC12.write("Lock Bro");
    delay(2000);
    alarm_limit++;
  } else {
    digitalWrite(7, LOW);
  }
  delay(10);
}


int calculate_average(int arr[], int size) {
  int i;
  int total = 0;
  for (i = 0; i < size; i++) {
    total += arr[i];
  }
  return total / size;
}

void Vibration() {
  for (i = 0; i < num; i++) {
    condition[i] = analogRead(vibration_detector);
  }

  if (calculate_average(condition, num) > 800) {
    count++;
    HC12.write("AV");
  }

  delay(1000);
}

void check_for_battery()

{
  digitalWrite(2, HIGH);  //turn on the battery checking relay
  delay(100);
  int read_port = analogRead(A1);  //reads the voltage in middle of the voltage divider

  if (read_port >= 650) {
    HC12.write("100%");
    delay(1000);
  }

  else if (read_port >= 644) {
    HC12.write("90%");
    delay(1000);
  }

  else if (read_port >= 637) {
    HC12.write("80%");
    delay(1000);
  }

  else if (read_port >= 631) {
    HC12.write("70%");
    delay(1000);
  }

  else if (read_port >= 624) {
    HC12.write("60%");
    delay(1000);
  }

  else if (read_port >= 616) {
    HC12.write("50%");
    delay(1000);
  }

  else if (read_port >= 609) {
    HC12.write("40%");
    delay(1000);
  }

  else if (read_port >= 601) {
   HC12.write("30%");
    delay(1000);
  }

  else if (read_port >= 593) {
    HC12.write("20%");
    delay(1000);
  }

  else if (read_port <= 593) {
    HC12.write("10%");
    delay(1000);
  }

  // Serial.print(battery_status);
  Serial.println("    check for battery executed");
  digitalWrite(2, LOW);  //turn off the relay
}
